/*
 * Contribuyente.c
 *
 *  Created on: May 15, 2021
 *      Author: Jonatan Barbuto
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "Contribuyente.h"
#include "Biblioteca.h"

#define FREE 1
#define BUSY 0


void initArrayContribuyente(eContribuyente array[], int size)
{
	int i;

	if(array != NULL && size > 0)
	{
		for(i = 0; i < size; i++)
		{
			array[i].isEmpty = FREE;
		}
	}
}

int arrayEmptyContribuyente(eContribuyente array[], int size)
{
	int rtn = 0;
	int i;

	if(array != NULL && size > 0)
	{
		for(i = 0; i < size; i++)
		{
			if(array[i].isEmpty == BUSY)
			{
				rtn ++;
			}
		}
	}
	return rtn;
}

int searchEmptyContribuyente(eContribuyente array[], int *pEmpty, int size)
{
	int i;
	int rtn = -1;

	if(array != NULL && size > 0)
	{
		for(i = 0; i < size; i++)
		{
			if(array[i].isEmpty == FREE)
			{
				*pEmpty = i;
				rtn = 0;
				break;
			}
		}
	}

	return rtn;
}

int getDownContribuyente(eContribuyente array[], int size)
{
	int i;
	int auxId;
	int rtn = -1;

	if(array != NULL && size > 0)
	{
		Get_IntRange("\nIngrese ID a dar de baja --> ", "ID no encontrado\n", &auxId, 1000, 1500, 3);

		for(i = 0; i < size; i++)
		{
			if(array[i].idContribuyente == auxId)
			{
				array[i].isEmpty = FREE;
				rtn = 0;
			}
		}
	}

	return rtn;
}

void showContribuyente(eContribuyente array[], int index)
{
	printf("+-----------------------------------------------------------------------------+\n");
	printf("|%10s  %20s  %20s  %20s| \n","ID","NOMBRE","APELLIDO","CUIL");
	printf("+-----------------------------------------------------------------------------+\n");
	printf("|%10d|  %20s|  %20s| %20s| \n",array[index].idContribuyente, array[index].nombre, array[index].apellido, array[index].cuil);
}

void showContribuyentes(eContribuyente array[], int size)
{
	int i;

	if(array != NULL && size > 0)
	{
		for(i = 0; i < size; i++)
		{
			if(array[i].isEmpty == BUSY)
			{
				showContribuyente(array, i);
			}
		}
	}
}

eContribuyente eContribuyente_CargarDatos(void)
{
	eContribuyente auxiliar;

	Get_OnlyAlphabetString("\nIngrese nombre --> ", "\nError, reingrese --> ", auxiliar.nombre, MAX_CHAR, 3);
	Get_OnlyAlphabetString("\nIngrese apellido --> ", "\nError, reingrese --> ", auxiliar.apellido, MAX_CHAR, 3);
	Get_Cuil("\nIngrese cuil --> ", "\nError, reingrese --> ", auxiliar.cuil, MAX_CHAR, 3);

	// El id se cambia en la siguiente funcion
	return auxiliar;
}

int eContribuyente_ObtenerID(int *idContribuyente)
{
	int rtn;
	rtn = *idContribuyente +=1;
	return rtn;
}

int eContribuyente_Alta(eContribuyente array[],int *idContribuyente, int size)
{
	int rtn = 0;
	eContribuyente auxContribuyente;

	int index = searchEmptyContribuyente(array, size);

	if (index != -1) {

			auxContribuyente = eContribuyente_CargarDatos();

		//	ePantalla_MostrarUno(auxPantalla);
			//mostrar antes de guardar
			if(Validate_Exit_SN("Desea continuar Si[s] - No[n]: ", "Error, Reingrese: "))
			{

				auxContribuyente.idContribuyente = eContribuyente_ObtenerID(&*idContribuyente);

				auxContribuyente.isEmpty = BUSY;
				array[index] = auxContribuyente;

				rtn = 1;
			}
			else
			{
				printf("Alta Cancelada");
			}

		}

		return rtn;
}

int eContribuyente_BuscarPorID(eContribuyente array[], int size, int ID)
{
	int rtn = -1;
	int i;
	if(array != NULL && size > 0)
	{
		for(i = 0; i < size; i++)
		{
			if(array[i].idContribuyente == ID && array[i].isEmpty == BUSY)
			{
				rtn = i;
				break;
			}
		}
	}

	return rtn;
}

int modificarContribuyente(eContribuyente array[], int size, int ID)
{
	int auxID;
	int index;
	int opcion;
	int rtn = -1;

	do
	{
		auxID = Get_IntRange("\nIngrese id a modificar --> ", "\nError, reingrese --> ", 1000, 1100, 3);
		index = eContribuyente_BuscarPorID(array, size, auxID);
	}while(index == -1);

	printf("\n--Menu de modificacion--"
			"1) Modificar nombre\n"
			"2) Modificar apellido\n"
			"3) Modificar cuil\n"
			"4) Volver al menu principal\n");
	opcion = Get_IntRange("\Ingrese la opcion a modificar --> ", "\nError, reingrese --> ", 1, 4, 3);

	switch(opcion)
	{
		case 1:
		{
			Get_OnlyAlphabetString("\nIngrese nuevo nombre --> ", "\nError, reingrese --> ", array[index].nombre, MAX_CHAR, 3);
			rtn = 0;
			break;
		}
		case 2:
		{
			Get_OnlyAlphabetString("\nIngrese nuevo apellido --> ", "\nError, reingrese --> ", array[index].apellido, MAX_CHAR, 3);
			rtn = 0;
			break;
		}
		case 3:
		{
			Get_Cuil("\nIngrese nuevo cuil --> ", "\nError, reingrese --> ", array[index].cuil, MAX_CHAR, 3);
			rtn = 0;
			break;
		}
		case 4:
		{
			rtn = 1;
			system("pause");
			break;
		}
	}
	return rtn;
}
